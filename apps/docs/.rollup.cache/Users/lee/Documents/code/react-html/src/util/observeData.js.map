{"version":3,"file":"observeData.js","sourceRoot":"","sources":["observeData.ts"],"names":[],"mappings":"AAIA;;;;;;;;;;;;;;;;;;;;;;GAsBG;AAEH,SAAS,WAAW,CAClB,QAAW,EACX,QAAW,EACX,SAAiC;IAEjC,IAAI,QAAQ,KAAK,QAAQ,EAAE;QACzB,QAAQ,GAAG,QAAQ,CAAC;QACpB,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;KACrD;IAED,8EAA8E;IAC9E,OAAO,QAAQ,CAAC;AAClB,CAAC;AAED,MAAM,CAAC,MAAM,WAAW,GAAiB,CAAI,YAAe,EAAE,EAAE;IAC9D,MAAM,KAAK,GAAG,YAAY,CAAC;IAC3B,IAAI,SAAS,GAA2B,EAAE,CAAC;IAE3C,MAAM,QAAQ,GAAG,CAAC,QAAW,EAAE,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;IAE1E,SAAS,WAAW,CAAC,QAA4B,EAAE,MAAM,GAAG,KAAK;QAC/D,IAAI,MAAM,EAAE;YACV,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,QAAQ,CAAC,CAAC;YACxD,OAAO;SACR;QACD,IAAI,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;YAChC,OAAO,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;YACpC,OAAO;SACR;QACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC3B,CAAC;IAED,OAAO,CAAC,KAAK,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC;AACxC,CAAC,CAAC","sourcesContent":["type TObserveData = <T>(\n  initialState: T\n) => [T, (newState: T) => T, (observer: (state: T) => void) => void];\n\n/**\n * @description\n * This function is used to observe data changes and re-render the component.\n * @param initialState\n * @returns [state, setState, addObserver]\n *\n * @example\n *\n * const observedNumber = observeData(0);\n * let [state] = observedNumber;\n * const [, setState, addObserver] = observedNumber;\n *\n * const render = () => {\n *  console.log(state.count);\n * };\n *\n * addObserver(render);\n *\n * // state의 최신화를 위해 setState의 리턴값을 다시 state로 사용합니다.\n * state = setState(state + 1);\n *\n * // console output: 1\n */\n\nfunction updateState<T>(\n  newState: T,\n  oldState: T,\n  observers: ((state: T) => void)[]\n) {\n  if (newState !== oldState) {\n    oldState = newState;\n    observers.forEach((observer) => observer(oldState));\n  }\n\n  // global 환경에서 (primitive한) state를 자동으로 업데이트 하는 방법을 찾지 못해 일단 새로운 state를 리턴합니다.\n  return oldState;\n}\n\nexport const observeData: TObserveData = <T>(initialState: T) => {\n  const state = initialState;\n  let observers: ((state: T) => void)[] = [];\n\n  const setState = (newState: T) => updateState(newState, state, observers);\n\n  function setObserver(observer: (state: T) => void, remove = false) {\n    if (remove) {\n      observers = observers.filter((obs) => obs !== observer);\n      return;\n    }\n    if (observers.includes(observer)) {\n      console.warn(\"이미 등록된 observer입니다.\");\n      return;\n    }\n    observers.push(observer);\n  }\n\n  return [state, setState, setObserver];\n};\n"]}